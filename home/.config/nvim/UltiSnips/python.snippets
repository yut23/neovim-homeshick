# modified from honza/vim-snippets/UltiSnips/python.snippets

snippet aoc "Advent of Code boilerplate" b
from typing import List

#import numpy as np
#import numpy.typing as npt


def parse(lines: List[str]) -> $1:
	${2:data} = $0
	return $2


def part_1(lines: List[str]) -> int:
	$2 = parse(lines)
endsnippet

#! header
snippet #! "#!/usr/bin/env python3" b
#!/usr/bin/env python3
$0
endsnippet

##########
# COMMON #
##########

# The smart def and smart class snippets use a global option called
# "g:ultisnips_python_style" which, if set to "doxygen" will use doxygen
# style comments in docstrings.

global !p

NORMAL  = 0x1
DOXYGEN = 0x2
SPHINX  = 0x3
GOOGLE  = 0x4
NUMPY   = 0x5
JEDI    = 0x6

SINGLE_QUOTES = "'"
DOUBLE_QUOTES = '"'


class Arg(object):
	def __init__(self, arg):
		self.arg = arg
		name_and_type = arg.split('=')[0].split(':')
		self.name = name_and_type[0].strip()
		self.type = name_and_type[1].strip() if len(name_and_type) == 2 else None

	def __str__(self):
		return self.name

	def __unicode__(self):
		return self.name

	def is_kwarg(self):
		return '=' in self.arg

	def is_vararg(self):
		return '*' in self.name


def get_args(arglist):
	args = [Arg(arg) for arg in arglist.split(',') if arg]
	args = [arg for arg in args if arg.name != 'self']

	return args


def get_quoting_style(snip):
	style = snip.opt("g:ultisnips_python_quoting_style", "double")
	if style == 'single':
		return SINGLE_QUOTES
	return DOUBLE_QUOTES

def triple_quotes(snip):
	style = snip.opt("g:ultisnips_python_triple_quoting_style")
	if not style:
		return get_quoting_style(snip) * 3
	return (SINGLE_QUOTES if style == 'single' else DOUBLE_QUOTES) * 3

def triple_quotes_handle_trailing(snip, quoting_style):
	"""
	Generate triple quoted strings and handle any trailing quote char,
	which might be there from some autoclose/autopair plugin,
	i.e. when expanding ``"|"``.
	"""
	if not snip.c:
		# Do this only once, otherwise the following error would happen:
		# RuntimeError: The snippets content did not converge: â€¦
		_, col = vim.current.window.cursor
		line = vim.current.line

		# Handle already existing quote chars after the trigger.
		_ret = quoting_style * 3
		while True:
			try:
				nextc = line[col]
			except IndexError:
				break
			if nextc == quoting_style and len(_ret):
				_ret = _ret[1:]
				col = col+1
			else:
				break
		snip.rv = _ret
	else:
		snip.rv = snip.c

def get_style(snip):
	style = snip.opt("g:ultisnips_python_style", "normal")

	if    style == "doxygen": return DOXYGEN
	elif  style == "sphinx": return SPHINX
	elif  style == "google": return GOOGLE
	elif  style == "numpy": return NUMPY
	elif  style == "jedi": return JEDI
	else: return NORMAL


def format_arg(arg, style):
	if style == DOXYGEN:
		return "@param %s TODO" % arg
	elif style == SPHINX:
		return ":param %s: TODO" % arg
	elif style == NORMAL:
		return ":%s: TODO" % arg
	elif style == GOOGLE:
		return "%s%s: TODO" % (arg, " (TODO)" if arg.type is None else "")
	elif style == JEDI:
		return ":type %s: TODO" % arg
	elif style == NUMPY:
		return "%s : TODO" % arg


def format_return(style):
	if style == DOXYGEN:
		return "@return: TODO"
	elif style in (NORMAL, SPHINX, JEDI):
		return ":returns: TODO"


def write_docstring_args(args, snip):
	if not args:
		snip.rv += ' {0}'.format(triple_quotes(snip))
		return

	snip.rv += '\n' + snip.mkline('', indent='')

	style = get_style(snip)

	if style == GOOGLE:
		write_google_docstring_args(args, snip)
	elif style == NUMPY:
		write_numpy_docstring_args(args, snip)
	else:
		for arg in args:
			snip += format_arg(arg, style)


def write_google_docstring_args(args, snip):
	kwargs = [arg for arg in args if arg.is_kwarg()]
	args = [arg for arg in args if not arg.is_kwarg()]

	if args:
		snip += "Args:"
		snip.shift()
		for arg in args:
			snip += format_arg(arg, GOOGLE)
		snip.unshift()
		snip.rv += '\n' + snip.mkline('', indent='')

	if kwargs:
		snip += "Kwargs:"
		snip.shift()
		for kwarg in kwargs:
			snip += format_arg(kwarg, GOOGLE)
		snip.unshift()
		snip.rv += '\n' + snip.mkline('', indent='')


def write_numpy_docstring_args(args, snip):
	if args:
		snip += "Parameters"
		snip += "----------"

	kwargs = [arg for arg in args if arg.is_kwarg()]
	args = [arg for arg in args if not arg.is_kwarg()]

	if args:
		for arg in args:
			snip += format_arg(arg, NUMPY)
	if kwargs:
		for kwarg in kwargs:
			snip += format_arg(kwarg, NUMPY) + ', optional'
	snip.rv += '\n' + snip.mkline('', indent='')


def write_init_body(args, parents, snip):
	parents = [p.strip() for p in parents.split(",")]
	parents = [p for p in parents if p != 'object']

	if len(parents) > 1:
		for p in parents:
			snip += p + ".__init__(self)"
	else:
		snip += "super().__init__()"

	if parents:
		snip.rv += '\n' + snip.mkline('', indent='')

	for arg in filter(lambda arg: not arg.is_vararg(), args):
		snip += "self._%s = %s" % (arg, arg)


def write_slots_args(args, snip):
	quote = get_quoting_style(snip)
	arg_format = quote + '_%s' + quote
	args = [arg_format % arg for arg in args]
	snip += '__slots__ = (%s,)' % ', '.join(args)


def write_function_docstring(t, snip, start):
	"""
	Writes a function docstring with the current style.

	:param t: The values of the placeholders
	:param snip: UltiSnips.TextObjects.SnippetUtil object instance
	:param start: The placeholder number to start at
	"""
	snip.rv = ""
	snip >> 1

	args = get_args(t[2] + ": " + t[3])
	if args:
		write_docstring_args(args, snip) # , start + 1)

	style = get_style(snip)

	if style == NUMPY:
		snip += 'Returns'
		snip += '-------'
		snip += 'TODO'
	elif style == GOOGLE:
		snip += 'Returns:'
		snip.shift()
		snip += 'TODO'
		snip.unshift()
	else:
		snip += format_return(style)
	#snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)

def get_dir_and_file_name(snip):
	return os.getcwd().split(os.sep)[-1] + '.' + snip.basename

endglobal

########################################
# Class & Special Method Name Snippets #
########################################

snippet class "class with docstrings" b
class ${1:MyClass}(${2:object}):
	`!p snip.rv = triple_quotes(snip)`${3:Docstring for $1.}`!p snip.rv = triple_quotes(snip)`

	def __init__(self$4) -> None:
		`!p snip.rv = triple_quotes(snip)`${5:TODO: to be defined.}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += '{0}'.format(triple_quotes(snip))

write_init_body(args, t[2], snip)
`
		$0
endsnippet


snippet slotclass "class with slots and docstrings" b
class ${1:MyClass}(${2:object}):
	`!p snip.rv = triple_quotes(snip)`${3:Docstring for $1.}`!p snip.rv = triple_quotes(snip)`
`!p
snip >> 1
args = get_args(t[4])
write_slots_args(args, snip)
`

	def __init__(self$4) -> None:
		`!p snip.rv = triple_quotes(snip)`${5:TODO: to be defined.}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)

write_init_body(args, t[2], snip)
`
		$0
endsnippet


snippet deff "function or class method"
def ${1:fname}(`!p snip.rv = "self, " if snip.indent else ""`$2) -> ${3:Any}:
	$0
endsnippet

snippet def "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}: ${3:Any}) -> ${4:Any}:
	`!p snip.rv = triple_quotes(snip)`${5:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip, 6) `
	${6:${VISUAL:pass}}
endsnippet


snippet defc "class method with docstrings" b
@classmethod
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'cls' + (", " if len(t[2]) else "")`${2:arg1}: ${3:Any}) -> ${4:Any}:
	`!p snip.rv = triple_quotes(snip)`${5:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip, 6) `
	${6:${VISUAL:pass}}
endsnippet


snippet defs "static method with docstrings" b
@staticmethod
def ${1:function}(${2:arg1}: ${3:Any}) -> ${4:Any}:
	`!p snip.rv = triple_quotes(snip)`${5:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip, 6) `
	${6:${VISUAL:pass}}
endsnippet


##############
# PROPERTIES #
##############
snippet roprop "Read Only Property" b
@property
def ${1:name}(self) -> ${2:Any}:
	${3:return self._$1}$0
endsnippet

snippet rwprop "Read write property" b
def ${1:name}():
	`!p snip.rv = triple_quotes(snip) if t[2] else ''
`${2:TODO: Docstring for $1.}`!p
if t[2]:
	snip >> 1

	style = get_style(snip)
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += format_return(style)
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)
else:
	snip.rv = ""`
	def fget(self) -> ${3:Any}:
		return self._$1$0

	def fset(self, value: $3) -> None:
		self._$1 = value
	return locals()

$1 = property(**$1(), doc=$1.__doc__)
endsnippet


clearsnippets contain
snippet __contain "methods for emulating a container type" bm
def __len__(self) -> int:
	${1:pass}

def __getitem__(self, key: ${2:Any}) -> ${3:Any}:
	${4:pass}

def __setitem__(self, key: $2, value: $3) -> None:
	${5:pass}

def __delitem__(self, key: $2) -> None:
	${6:pass}

def __iter__(self) -> Iterator[$3]:
	${7:pass}

def __reversed__(self) -> Iterator[$3]:
	${8:pass}

def __contains__(self, item: $3) -> bool:
	${9:pass}
endsnippet


clearsnippets attr
snippet __attr "methods for customizing attribute access" bm
def __getattr__(self, name: str) -> ${1:Any}:
	${1:pass}

def __setattr__(self, name: str, value: $1) -> None:
	${2:pass}

def __delattr__(self, name: str) -> None:
	${3:pass}
endsnippet


clearsnippets cmp
snippet __cmp "methods implementing rich comparison" bm
def __eq__(self, other) -> bool:
	${1:pass}

def __ne__(self, other) -> bool:
	${2:pass}

def __lt__(self, other) -> bool:
	${3:pass}

def __le__(self, other) -> bool:
	${4:pass}

def __gt__(self, other) -> bool:
	${5:pass}

def __ge__(self, other) -> bool:
	${6:pass}

def __cmp__(self, other) -> bool:
	${7:pass}
endsnippet


clearsnippets repr
snippet __repr "methods implementing string representation" bm
def __repr__(self) -> str:
	${1:pass}

def __str__(self) -> str:
	${2:pass}

def __unicode__(self) -> str:
	${3:pass}
endsnippet
